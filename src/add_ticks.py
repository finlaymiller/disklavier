import os
import mido
from math import floor

p_dataset = "/media/nova/Datasets/sageev-midi"
old_dataset_name = "20240621-nested"
new_dataset_name = "20250110"
p_old_dataset = os.path.join(p_dataset, old_dataset_name)
p_new_dataset = os.path.join(p_dataset, new_dataset_name)


def num_beats(midi: mido.MidiFile, bpm: int = 60) -> int:
    file_len_s = sum(msg.time for msg in midi)
    total_beats = file_len_s * bpm / 60

    return floor(total_beats)


def add_tempo_to_file(in_path: str, out_path: str, midi_file: str) -> bool:
    pf_midi = os.path.join(in_path, midi_file)

    # load midi file
    midi = mido.MidiFile(pf_midi)

    # extract timing information
    bpm = int(os.path.basename(midi_file).split("-")[1])
    tempo = mido.bpm2tempo(bpm)
    n_beats = num_beats(midi, bpm)
    beat_times_s = [
        mido.second2tick(60 / bpm, midi.ticks_per_beat, tempo)
        for _ in range(0, n_beats)
    ]

    # create tick track
    last_beat = 0
    tick_track = mido.MidiTrack()
    tick_track.append(mido.MetaMessage("track_name", name="tick", time=last_beat))
    for i, beat_time in enumerate(beat_times_s):
        beat_msg = mido.MetaMessage(
            "text",
            text=f"beat {i}",
            time=beat_time,
        )
        tick_track.append(beat_msg)
    midi.tracks.append(tick_track)

    # place new segment in proper subdir
    dirs = in_path.split("/")
    subdataset = dirs[-2]
    track = dirs[-1]
    pf_new_midi = os.path.join(out_path, subdataset, track, midi_file)
    os.makedirs(os.path.join(out_path, subdataset, track), exist_ok=True)
    # midi.print_tracks()
    midi.type = 1  # to allow saving with multiple tracks (some files generated by Live are type 0)
    midi.save(filename=pf_new_midi)
    print(f"\tsaved to {pf_new_midi}")
    return os.path.isfile(pf_new_midi)


n_files = 0
for folder, _, files in os.walk(p_old_dataset):
    # print(f"scanning '{folder}' ({len(files)} files found)")
    for file in files:
        if file.endswith(".mid") or file.endswith(".midi"):
            res = add_tempo_to_file(folder, p_new_dataset, file)
            if res:
                n_files += 1
            else:
                print(f"failed to write file '{folder}/{file}'")
print(f"DONE ({n_files} files written)")
